unit SimpleService_Intf;

// ----------------------------------------------------------------------
//  This file was automatically generated by RemObjects SDK from a
//  RODL file downloaded from a server or associated with this project.
// 
//  Do not modify this file manually, or your changes will be lost when
//  it is regenerated the next time you update your RODL.
// ----------------------------------------------------------------------

{$I RemObjects.inc}

interface

uses
  {$IFDEF DELPHIXE2UP}System.SysUtils{$ELSE}SysUtils{$ENDIF},
  {$IFDEF DELPHIXE2UP}System.Classes{$ELSE}Classes{$ENDIF},
  {$IFDEF DELPHIXE2UP}System.TypInfo{$ELSE}TypInfo{$ENDIF},
  uROUri,
  uROProxy,
  uROExceptions,
  uROXMLIntf,
  uROClasses,
  uROTypes,
  uROClientIntf,
  uROAsync,
  uROEventReceiver;

const LibraryUID = '{AC55A788-568A-41A2-BF15-9CDE01725FE5}';
const TargetNamespace = 'SimpleService';
const ISimpleService_IID: TGUID = '{49EA4179-C56C-4809-A75B-EFFA5BAE195E}';
type
  { Forward declarations }
  ISimpleService = interface;
  ISimpleService_Async = interface;
  ISimpleService_AsyncEx = interface;
  CoSimpleService = class;
  CoSimpleService_Async = class;
  CoSimpleService_AsyncEx = class;
  TSimpleService_Proxy = class;
  TSimpleService_AsyncProxy = class;
  TSimpleService_AsyncProxyEx = class;

  ISimpleService = interface(IROService)
  ['{49ea4179-c56c-4809-a75b-effa5bae195e}']
    procedure Sum(const aA: Integer; const aB: Integer; out aResult: Integer);
  end;

  ISimpleService_Async = interface(IROAsyncInterface)
  ['{b11f9f44-01d9-4979-b61f-55ceec7349c2}']
    procedure Invoke_Sum(const aA: Integer; const aB: Integer);
    procedure Retrieve_Sum(out aResult: Integer);
  end;

  ISimpleService_AsyncEx = interface(IROAsyncInterfaceEx)
  ['{50e987dd-57cb-49aa-96a9-2158a5d0a63a}']
    function BeginSum(const aA: Integer; const aB: Integer; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    procedure EndSum(out aResult: Integer; const aRequest: IROAsyncRequest);
  end;

  CoSimpleService = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): ISimpleService; overload;
    class function Create(const aUri: TROUri): ISimpleService; overload;
    class function Create(const aUrl: String): ISimpleService; overload;
  end;

  CoSimpleService_Async = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): ISimpleService_Async; overload;
    class function Create(const aUri: TROUri): ISimpleService_Async; overload;
    class function Create(const aUrl: String): ISimpleService_Async; overload;
  end;

  CoSimpleService_AsyncEx = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): ISimpleService_AsyncEx; overload;
    class function Create(const aUri: TROUri): ISimpleService_AsyncEx; overload;
    class function Create(const aUrl: String): ISimpleService_AsyncEx; overload;
  end;

  TSimpleService_Proxy = class(TROProxy, ISimpleService)
  protected
    function __GetInterfaceName: String; override; 
    procedure Sum(const aA: Integer; const aB: Integer; out aResult: Integer);
  end;

  TSimpleService_AsyncProxy = class(TROAsyncProxy, ISimpleService_Async)
  protected
    function __GetInterfaceName: String; override; 
    procedure Invoke_Sum(const aA: Integer; const aB: Integer);
    procedure Retrieve_Sum(out aResult: Integer);
  end;

  TSimpleService_AsyncProxyEx = class(TROAsyncProxyEx, ISimpleService_AsyncEx)
  protected
    function __GetInterfaceName: String; override; 
    function BeginSum(const aA: Integer; const aB: Integer; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    procedure EndSum(out aResult: Integer; const aRequest: IROAsyncRequest);
  end;

implementation

uses
  uROSerializer,
  uROClient,
  uROTransportChannel,
  uRORes;

type
  { Forward declarations }
  TMyTransportChannel = class;

  TMyTransportChannel = class(TROTransportChannel)
  end;

class function CoSimpleService.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): ISimpleService;
begin
  result := TSimpleService_Proxy.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoSimpleService.Create(const aUri: TROUri): ISimpleService;
begin
  result := TSimpleService_Proxy.Create(aUri);
  exit;
end;

class function CoSimpleService.Create(const aUrl: String): ISimpleService;
begin
  result := TSimpleService_Proxy.Create(aUrl);
  exit;
end;

class function CoSimpleService_Async.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): ISimpleService_Async;
begin
  result := TSimpleService_AsyncProxy.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoSimpleService_Async.Create(const aUri: TROUri): ISimpleService_Async;
begin
  result := TSimpleService_AsyncProxy.Create(aUri);
  exit;
end;

class function CoSimpleService_Async.Create(const aUrl: String): ISimpleService_Async;
begin
  result := TSimpleService_AsyncProxy.Create(aUrl);
  exit;
end;

class function CoSimpleService_AsyncEx.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): ISimpleService_AsyncEx;
begin
  result := TSimpleService_AsyncProxyEx.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoSimpleService_AsyncEx.Create(const aUri: TROUri): ISimpleService_AsyncEx;
begin
  result := TSimpleService_AsyncProxyEx.Create(aUri);
  exit;
end;

class function CoSimpleService_AsyncEx.Create(const aUrl: String): ISimpleService_AsyncEx;
begin
  result := TSimpleService_AsyncProxyEx.Create(aUrl);
  exit;
end;

function TSimpleService_Proxy.__GetInterfaceName: String;
begin
  result := 'SimpleService';
  exit;
end;

procedure TSimpleService_Proxy.Sum(const aA: Integer; const aB: Integer; out aResult: Integer);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'SimpleService', __InterfaceName, 'Sum');
    lMessage.Write('aA', System.TypeInfo(Integer), aA, []);
    lMessage.Write('aB', System.TypeInfo(Integer), aB, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('aResult', System.TypeInfo(Integer), aResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TSimpleService_AsyncProxy.__GetInterfaceName: String;
begin
  result := 'SimpleService';
  exit;
end;

procedure TSimpleService_AsyncProxy.Invoke_Sum(const aA: Integer; const aB: Integer);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('Sum');

    lMessage.InitializeRequestMessage(lTransportChannel, 'SimpleService', __InterfaceName, 'Sum');
    lMessage.Write('aA', System.TypeInfo(Integer), aA, []);
    lMessage.Write('aB', System.TypeInfo(Integer), aB, []);
    __DispatchAsyncRequest('Sum', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TSimpleService_AsyncProxy.Retrieve_Sum(out aResult: Integer);
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('Sum');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('aResult', System.TypeInfo(Integer), aResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TSimpleService_AsyncProxyEx.__GetInterfaceName: String;
begin
  result := 'SimpleService';
  exit;
end;

function TSimpleService_AsyncProxyEx.BeginSum(const aA: Integer; const aB: Integer; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'SimpleService', __InterfaceName, 'Sum');
    lMessage.Write('aA', System.TypeInfo(Integer), aA, []);
    lMessage.Write('aB', System.TypeInfo(Integer), aB, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

procedure TSimpleService_AsyncProxyEx.EndSum(out aResult: Integer; const aRequest: IROAsyncRequest);
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('aResult', System.TypeInfo(Integer), aResult, []);
end;

initialization
  RegisterProxyClass(ISimpleService_IID, TSimpleService_Proxy);
finalization
  UnregisterProxyClass(ISimpleService_IID);
end.
